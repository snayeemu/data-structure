#include <bits/stdc++.h>
using namespace std;

class Node // Node কে আমরা বাড়ি মনে করি
{
public:
    int value;         // বাড়িতে থাকা সম্পদের পরিমাণ
    Node *prev = NULL; // এটা আমাদের আগের বাড়িতে ফিরে যাওয়ার রাস্তা
    Node *next = NULL; // এটা আমাদের পরের বাড়িতে ফিরে যাওয়ার রাস্তা
};

class linkedList
{
public:
    Node *head, *tail; // head = গ্রামের প্রথম বাড়ির ঠিকানা, tail = গ্রামের শেষ বাড়ি
    int size;          // বর্তমানে গ্রামে কতটি বাড়ি আছে

    linkedList() // গ্রামে কোনো বাড়ি বানানোর আগে গ্রামের অবস্থা কেমন ছিলো
    {
        this->head = NULL; // কোনো বাড়ি নেই, তাই প্রথম বাড়ির ঠিকানাও নেই
        this->tail = NULL; // কোনো বাড়ি নেই, তাই শেষ বাড়ির ঠিকানাও নেই
        this->size = 0;    // গ্রামে এখন বাড়ির সংখ্যা ০ টি
    }

    void push(int value) // নতুন বাড়ি গ্রামের শেষ প্রান্তে তৈরি করা হলে যা হবে
    {
        Node *temp = new Node; // একটা বাড়ি তৈরি করা হলো
        temp->value = value;   // বাড়িতে সম্পদ রাখা হলো

        if (head == NULL) // যদি গ্রামে কোনো বাড়ি না থাকে
        {
            head = temp; // তাহলে তৈরি করা নতুন বাড়িটিই হচ্ছে প্রথম বাড়ি
            tail = temp; // আবার তৈরি করা নতুন বাড়িটিই হচ্ছে শেষ বাড়ি
        }
        else // যদি গ্রামে কোনো বাড়ি থাকে
        {
            temp->prev = tail; // তাহলে বর্তমান বাড়ির prev নামক রাস্তা দিয়ে, আগে শেষে যেই বাড়িটি ছিলো সেই বাড়িতে যাওয়া যাবে
            tail->next = temp; // আগে শেষে যেই বাড়িটি ছিলো সেটার next নামক রাস্তা দিয়ে মাত্র তৈরি বাড়িতে যাওয়া যাবে
            tail = temp;       // মাত্র তৈরি বাড়িটিই হচ্ছে বর্তমানে গ্রামের শেষ বাড়ি
        }
        size++; // নতুন একটি বাড়ি তৈরি হওয়ায় বাড়ির সংখ্যা ১ বেড়েছে।
    }

    void print() // গ্রামের ম্যাপ
    {
        Node *temp = head;   // প্রথম বাড়ির ঠিকানা
        while (temp != NULL) // যতক্ষণ না শেষ বাড়ি পর্যন্ত পৌঁছাচ্ছি
        {
            cout << temp->value << " "; // বাড়িটি আঁকা হচ্ছে
            temp = temp->next;          // next রাস্তা দিয়ে পরের বাড়ি যাওয়া হচ্ছে
        }
        cout << endl;
    }

    void insert(int value, int position) // যে কোনো একটি জায়গায় একটি বাড়ি তৈরি করতে
    {
        Node *previous = head; // প্রথম বাড়ির ঠিকানা
        Node *current = NULL;  // বাড়ির ঠিকানা রাখার জায়গা

        if (position == 0) // যদি গ্রামের শুরুতে তৈরি করতে হয়
        {
            this->insertAtHead(value); // insertAtHead এ থাকা নির্দেশনা অনুসরণ করতে হবে
            return;
        }

        if (position > size) // যদি বাড়িটির জন্য বরাদ্দ জায়গা গ্রামে মধ্যে না হয়
        {
            cout << "Invalid" << endl; // বাড়িটি গ্রামের বাইরে হওয়ায় কোনো পরিবর্তন হবে না
            return;
        }

        for (int i = 0; i < position - 1; i++) // বর্তমান বাড়ির আগের বাড়ি না পাওয়া পর্যন্ত যেতে থাক
        {
            previous = previous->next; // বর্তমান বাড়ির next নামক রাস্তা দিয়ে পরের বাড়ি যাও
            if (previous == NULL)      // যেতে যেতে যদি গ্রামের শেষ প্রান্তে চলে আসো
            {
                cout << "Invalid" << endl; // তাহলে বাড়িটি এই গ্রামের মধ্যে না
                return;
            }
        }
        if (previous == tail) // যদি বর্তমান বাড়িটি গ্রামের শেষ বাড়ি হয়
        {
            push(value); // তাহলে push এ থাকা নির্দেশনা অনুসরণ করো
            return;
        }

        // বাড়িটি মাঝামাঝি কোথাও হলে
        current = previous->next; // বর্তমান বাড়ির পরের বাড়ির ঠিকানা

        Node *newNode = new Node; // নতুন বাড়ি তৈরি হলো
        newNode->value = value;   // নতুন বাড়িতে সম্পদ রাখা হলো
        previous->next = newNode; // আগের বাড়ির next রাস্তাটা নতুন বাড়ির সাথে যুক্ত হলো
        current->prev = newNode;  // পরের বাড়ির prev নামক রাস্তাটা নতুন বাড়ির সাথে যুক্ত হলো
        newNode->next = current;  // নতুন বাড়ি থেকে পরের বাড়িতে যাওয়ার রাস্তা
        newNode->prev = previous; // নতুন বাড়ি থেকে আগের বাড়িতে যাওয়ার রাস্তা

        size++; // নতুন একটি বাড়ি তৈরি হওয়ায় বাড়ির সংখ্যা ১ বেড়েছে।
    }

    void insertAtHead(int value) // গ্রামের শুরুতে বাড়ি তৈরি করতে হলে
    {
        Node *newNode = new Node; // নতুন বাড়ি তৈরি করা হলো
        newNode->value = value;   // নতুন বাড়িতে সম্পদ রাখা হলো
        newNode->next = head;     // নতুন বাড়ি থেকে আগের head এ থাকা লোকেশনের দিকে একটি রাস্তা তৈরি করা হলো
        if (head == NULL)         // গ্রামে যদি আগে থেকে কোনো বাড়ি না থাকে
        {
            head = newNode; // তাহলে নতুন বাড়িটি গ্রামের প্রথম বাড়ি
            tail = newNode; // তাহলে নতুন বাড়িটি গ্রামের শেষ বাড়ি
            size++;         // নতুন একটি বাড়ি তৈরি হওয়ায় বাড়ির সংখ্যা ১ বেড়েছে।
            return;
        }

        // অথবা
        head->prev = newNode; // head এ থাকা ঠিকানার বাড়ি থেকে নতুন বাড়ির দিকে prev নামক রাস্তা তৈরি করতে হবে
        newNode->next = head; // head এ থাকা ঠিকানার দিকে next নামক রাস্তা তৈরি করতে হবে
        head = newNode;       // নতুন বাড়িটিই গ্রামের প্রথম বাড়ি

        size++; // নতুন একটি বাড়ি তৈরি হওয়ায় বাড়ির সংখ্যা ১ বেড়েছে
    }

    void deleteAt(int position) // বাড়ি ভাঙতে হলে
    {
        if (head == NULL)         // যদি গ্রামে কোনো বাড়িই না থাকে
            return;               // ভাঙার মতো কোনো বাড়ি নেই
        if (position == size - 1) // যদি গ্রামের শেষ বাড়িটি ভাঙতে হয়
        {
            deleteTail(); // deleteTail এ থাকা নির্দেশনা অনুসরণ করো
            return;
        }

        if (position == 0) // যদি গ্রামের প্রথম বাড়িটি ভাঙতে হয়
        {
            this->deleteHead(); // deleteHead এ থাকা নির্দেশনা অনুসরণ করো
            return;
        }

        // অথবা
        Node *previous, *toDelete; // ঠিকানা রাখার জায়গা
        previous = head;           // প্রথম বাড়ির ঠিকানা

        for (int i = 0; i < position - 1; i++) // যেতে থাক যতক্ষণ না যেই বাড়িটি ভাঙতে হবে তার আগের বাড়িটি পাওয়া যায়
        {
            previous = previous->next;                      // next নামক রাস্তা দিয়ে পরের বাড়িতে যাও
            if (previous == NULL || previous->next == NULL) // যদি বাড়িটির ঠিকানা গ্রামের বাইরে হয়
                return;                                     // তাহলে কিছুই করা যাবে না
        }

        // অথবা
        toDelete = previous->next; // যেই বাড়িটি ভাঙতে হবে সেটির ঠিকানা
        if (toDelete == NULL)      // যদি বাড়িটির ঠিকানা গ্রামের বাইরে হয়
            return;                // তাহলে কিছুই করা যাবে না
        // অথবা
        previous->next = toDelete->next; // previous এ থাকা ঠিকানার বাড়ি থেকে যেই বাড়িটি ভাঙতে হবে তার পরের বাড়ির দিকে next রাস্তা তৈরি করো
        toDelete->next->prev = previous; // যেই বাড়িটি ভাঙতে হবে তার পরের বাড়ি থেকে আগের বাড়ির দিকে prev নামক রাস্তা তৈরি করো

        delete toDelete; // বাড়িটি ভেঙে দাও
        size--;          // গ্রামে বাড়ির সংখ্যা ১ কমে গেলো
    }

    void deleteHead() // প্রথম বাড়িটি ভাঙতে হলে
    {
        if (head == NULL) // যদি গ্রামে কোনো বাড়িই না থাকে
            return;       // ভাঙার মতো কোনো বাড়ি নেই

        // অথবা
        Node *previousHead = head; // প্রথম বাড়ির ঠিকানা
        head = head->next;         // head এ প্রথম বাড়ির পরের বাড়ির ঠিকানা রাখি
        if (head == NULL)          // যদি গ্রামে কোনো বাড়িই না থাকে
            tail = NULL;           // তাহলে গ্রামের শেষেও কোনো বাড়ি নেই
        else                       // অথবা
            head->prev = NULL;     // head এ রাখা ঠিকানার বাড়িটির prev নামক রাস্তা দিয়ে অন্য বাড়িতে যাওয়া যাবে না
        delete previousHead;       // previousHead এ রাখা ঠিকানার বাড়িটি ভেঙে ফেলি
        size--;                    // গ্রামে বাড়ির সংখ্যা ১ কমে গেলো
    }

    void deleteTail() // শেষের বাড়িটি ভাঙতে হলে
    {
        Node *toDelete = tail; // শেষের বাড়ির ঠিকানা
        if (tail == head)      // গ্রামে যদি একটাই বাড়ি থাকে
        {
            head = NULL; // তাহলে ভাঙার পর গ্রামে প্রথম বাড়ি বলে কিছু থাকবে না
            tail = NULL; // তাহলে ভাঙার পর গ্রামে শেষ বাড়ি বলে কিছু থাকবে না
        }
        else // অথবা
        {
            tail->prev->next = NULL; // ভাঙার পর ভাঙা বাড়িটির আগের বাড়ির next নামক রাস্তা দিয়ে কোনো বাড়িতে যাওয়া যাবে না
            tail = tail->prev;       // ভাঙা বাড়ির আগের বাড়িটিই হবে গ্রামের শেষ বাড়ি
        }
        delete toDelete; // toDelete ঠিকানায় থাকা বাড়িটি ভেঙে ফেলি
        size--;          // গ্রামে বাড়ির সংখ্যা ১ কমে গেলো
    }
};
